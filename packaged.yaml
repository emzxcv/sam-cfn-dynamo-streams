AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Tech Challenge
Parameters:
  MyName:
    Type: String
    Description: Name of the Candidate
Resources:
  MyTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: dynamoStreamsTopic
  ProcessDynamoDBStream:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      Policies:
      - AWSLambdaDynamoDBExecutionRole
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::GetAtt:
            - MyTopic
            - TopicName
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - DynamoTable
              - StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
      Environment:
        Variables:
          TOPIC_NAME: dynamoStreamsTopic
      CodeUri: s3://emilyh-bucket/84fd877976b255a015e8c5ea658e455a
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: Challenge_${MyName}
      AttributeDefinitions:
      - AttributeName: team
        AttributeType: S
      KeySchema:
      - AttributeName: team
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      Code:
        ZipFile: "import json\nimport os \nimport boto3\n\ndef response(message, status_code):\n\
          \  return {\n    'statusCode': str(status_code),\n    'body': json.dumps(message),\n\
          \    'headers': {\n        'Content-Type': 'application/json',\n       \
          \ 'Access-Control-Allow-Origin': '*'\n        },\n    }\n\ndef dynamo_itemcreate(team_name,\
          \ team_country, team_desc, team_rating):\n    dynamodb = boto3.client('dynamodb')\n\
          \    db_name = os.environ['DB_NAME']\n    dynamodb.put_item(TableName=db_name,\
          \ Item={'country':{'S':team_country}, 'team':{'S':team_name}, 'desc':{'S':team_desc},\
          \ 'rating':{'S':team_rating}})\n\ndef lambda_handler(event, context):\n\
          \    try:\n        print('Team Country: %s' % event['team_country'])\n \
          \       print('Team Name: %s' % event['team_name'])\n        print('Team\
          \ Description: %s' % event['team_desc'])\n        print('Team Rating: %s'\
          \ % event['team_rating'])\n        dynamo_itemcreate(event['team_name'],\
          \ event['team_country'], event['team_desc'],event['team_rating'])\n    \
          \    return response({'message': 'Success' }, 201)\n    except Exception\
          \ as e:\n        return response({'message': e.message}, 400)\n    \n"
      Description: API Gateway TechChallenge
      Environment:
        Variables:
          DB_NAME:
            Fn::Sub: Challenge_${MyName}
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 5
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:BatchGetItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            Resource:
              Fn::GetAtt:
              - DynamoTable
              - Arn
  APIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - LambdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: ApiRestApi
          - /*/*/*
  ApiRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: RestTechChallenge1_${MyName}
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiRestApi
        - RootResourceId
      RestApiId:
        Ref: ApiRestApi
      PathPart: add_new
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiRestApi
      ResourceId:
        Ref: ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - LambdaFunction
              - Arn
            - /invocations
        IntegrationResponses:
        - ResponseTemplates:
            application/json: '{}'
          ResponseParameters:
            method.response.header.Location: integration.response.body.headers.uid
          StatusCode: 201
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "team_name": $input.json(''team_name''), "team_country":
            $input.json(''team_country''), "team_desc": $input.json(''team_desc''),
            "team_rating": $input.json(''team_rating'')}'
      RequestModels:
        application/json:
          Ref: ApiModel
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Location: true
        StatusCode: 201
  ApiModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: Team
      RestApiId:
        Ref: ApiRestApi
      Schema:
        title: Team
        type: object
        properties:
          team_country:
            type: string
          team_name:
            type: string
          team_desc:
            type: string
          team_rating:
            type: string
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ApiRestApi
      StageName: v1
    DependsOn:
    - ApiMethod
    - ApiModel
    - ApiRestApi
    - APIPermission
Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: ApiRestApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/
